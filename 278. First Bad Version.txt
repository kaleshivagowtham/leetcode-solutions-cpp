278. First Bad Version

***The reason we use 

    "mid = low + (high - low)/2;"

    in the code is because we have considered low, high and mid in 'int' data type.
    if 'n' is too large, 'high + low' could become out of range of int.
    But if we consider
        'low + (high - low)/2' 
    there is more chance that it doesn't go out of range in the process.

    Try using '(high + low)/2' to understand the requirement.

---------------------------------------------------------------------------

// The API isBadVersion is defined for you.
// bool isBadVersion(int version);

class Solution {
public:
    int firstBadVersion(int n) {

        if(n ==1)
            return 1;

        int low = 0, high = n, mid = (low + high)/2;

        while(low <= high) {

            mid = low + (high-low)/2;
            if(isBadVersion(mid))
                high = mid - 1;
            else
                low = mid + 1 ;
        }

        return low;
    }
};