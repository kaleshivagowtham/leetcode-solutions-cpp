287. Find the Duplicate Number

----------------------------------------------------------------------------------
One approach -> But out of 'int' bounds

int findDuplicate(vector<int>& nums) {
        
    int i=0,n=nums.size();
    long sum=0;
    while(i<n)
    {
        sum += nums[i];
        i++;
    }
    int ans = sum - (n*(n-1))/2;

    return ans;
}
-----------------------------------------------------------------------------------
Working approach-> using Floyd's cycle detection algorithm

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        
        int sptr = nums[0];
        int fptr = nums[0];
        
        do{
            sptr = nums[sptr];
            fptr = nums[fptr];
            fptr = nums[fptr];
        }while(sptr != fptr);

        fptr = nums[0];

        while(sptr != fptr)
        {
            sptr = nums[sptr];
            fptr = nums[fptr];
        }

        return sptr;
    }
};

